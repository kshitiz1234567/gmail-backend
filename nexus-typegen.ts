/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./api/context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  dateTimeInput: { // input type
    gte: NexusGenScalars['DateTime']; // DateTime!
    lte: NexusGenScalars['DateTime']; // DateTime!
  }
  messageInput: { // input type
    Bcc: string[]; // [String!]!
    Cc: string[]; // [String!]!
    body?: string | null; // String
    recipientName: string[]; // [String!]!
    subject?: string | null; // String
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
  DateTime: any
}

export interface NexusGenObjects {
  Message: { // root type
    Bcc?: Array<string | null> | null; // [String]
    Cc?: Array<string | null> | null; // [String]
    attribute?: string | null; // String
    authorName?: string | null; // String
    body?: string | null; // String
    isRead?: boolean | null; // Boolean
    isStarred?: boolean | null; // Boolean
    mappingId?: string | null; // ID
    recipientName?: Array<string | null> | null; // [String]
    subject?: string | null; // String
    time?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Mutation: {};
  Query: {};
  User: { // root type
    birth_date?: NexusGenScalars['Date'] | null; // Date
    first_name?: string | null; // String
    last_name?: string | null; // String
    phone_number?: string | null; // String
    recovery_email?: string | null; // String
    sex?: number | null; // Int
    username?: string | null; // String
  }
  authPayLoad: { // root type
    token?: string | null; // String
    user?: NexusGenRootTypes['User'] | null; // User
  }
  dateTimeDestructure: { // root type
    day?: string | null; // String
    isToday?: boolean | null; // Boolean
    time?: string | null; // String
    year?: string | null; // String
  }
  error: { // root type
    code?: string | null; // String
    errors?: Array<NexusGenRootTypes['errorType'] | null> | null; // [errorType]
  }
  errorType: { // root type
    code?: string | null; // String
    message?: string | null; // String
  }
  listOfMessage: { // root type
    listOfMessage?: Array<NexusGenRootTypes['Message'] | null> | null; // [Message]
  }
  status: { // root type
    list?: Array<string | null> | null; // [String]
    message?: string | null; // String
    status_code?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
  UserResult: core.Discriminate<'authPayLoad', 'required'> | core.Discriminate<'error', 'required'> | core.Discriminate<'errorType', 'required'>;
  listOfMessageResult: core.Discriminate<'errorType', 'required'> | core.Discriminate<'listOfMessage', 'required'>;
  messageResult: core.Discriminate<'Message', 'required'> | core.Discriminate<'errorType', 'required'>;
  queryResult: core.Discriminate<'errorType', 'required'> | core.Discriminate<'status', 'required'>;
  statusResult: core.Discriminate<'errorType', 'required'> | core.Discriminate<'status', 'required'>;
}

export type NexusGenRootTypes = NexusGenObjects & NexusGenUnions

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Message: { // field return type
    Bcc: Array<string | null> | null; // [String]
    Cc: Array<string | null> | null; // [String]
    attribute: string | null; // String
    authorName: string | null; // String
    body: string | null; // String
    dateAndTime: NexusGenRootTypes['dateTimeDestructure'] | null; // dateTimeDestructure
    isRead: boolean | null; // Boolean
    isStarred: boolean | null; // Boolean
    mappingId: string | null; // ID
    recipientName: Array<string | null> | null; // [String]
    subject: string | null; // String
    time: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Mutation: { // field return type
    createUser: NexusGenRootTypes['UserResult'] | null; // UserResult
    deleteMessage: NexusGenRootTypes['statusResult'] | null; // statusResult
    moveToTrash: NexusGenRootTypes['statusResult'] | null; // statusResult
    saveMessage: NexusGenRootTypes['messageResult'] | null; // messageResult
    sentMessageNew: NexusGenRootTypes['statusResult'] | null; // statusResult
    sentMessageSaved: NexusGenRootTypes['statusResult'] | null; // statusResult
    updateMessage: NexusGenRootTypes['statusResult'] | null; // statusResult
    updateStatusRead: NexusGenRootTypes['statusResult'] | null; // statusResult
    updateStatusStarred: NexusGenRootTypes['statusResult'] | null; // statusResult
  }
  Query: { // field return type
    checkIfUnique: NexusGenRootTypes['queryResult'] | null; // queryResult
    meUser: NexusGenRootTypes['UserResult'] | null; // UserResult
    messages: NexusGenRootTypes['listOfMessageResult'] | null; // listOfMessageResult
    searchMessage: NexusGenRootTypes['listOfMessageResult'] | null; // listOfMessageResult
    verifyUser: NexusGenRootTypes['UserResult'] | null; // UserResult
  }
  User: { // field return type
    birth_date: NexusGenScalars['Date'] | null; // Date
    first_name: string | null; // String
    last_name: string | null; // String
    phone_number: string | null; // String
    recovery_email: string | null; // String
    sex: number | null; // Int
    username: string | null; // String
  }
  authPayLoad: { // field return type
    token: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  dateTimeDestructure: { // field return type
    day: string | null; // String
    isToday: boolean | null; // Boolean
    time: string | null; // String
    year: string | null; // String
  }
  error: { // field return type
    code: string | null; // String
    errors: Array<NexusGenRootTypes['errorType'] | null> | null; // [errorType]
  }
  errorType: { // field return type
    code: string | null; // String
    message: string | null; // String
  }
  listOfMessage: { // field return type
    listOfMessage: Array<NexusGenRootTypes['Message'] | null> | null; // [Message]
  }
  status: { // field return type
    list: Array<string | null> | null; // [String]
    message: string | null; // String
    status_code: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Message: { // field return type name
    Bcc: 'String'
    Cc: 'String'
    attribute: 'String'
    authorName: 'String'
    body: 'String'
    dateAndTime: 'dateTimeDestructure'
    isRead: 'Boolean'
    isStarred: 'Boolean'
    mappingId: 'ID'
    recipientName: 'String'
    subject: 'String'
    time: 'DateTime'
  }
  Mutation: { // field return type name
    createUser: 'UserResult'
    deleteMessage: 'statusResult'
    moveToTrash: 'statusResult'
    saveMessage: 'messageResult'
    sentMessageNew: 'statusResult'
    sentMessageSaved: 'statusResult'
    updateMessage: 'statusResult'
    updateStatusRead: 'statusResult'
    updateStatusStarred: 'statusResult'
  }
  Query: { // field return type name
    checkIfUnique: 'queryResult'
    meUser: 'UserResult'
    messages: 'listOfMessageResult'
    searchMessage: 'listOfMessageResult'
    verifyUser: 'UserResult'
  }
  User: { // field return type name
    birth_date: 'Date'
    first_name: 'String'
    last_name: 'String'
    phone_number: 'String'
    recovery_email: 'String'
    sex: 'Int'
    username: 'String'
  }
  authPayLoad: { // field return type name
    token: 'String'
    user: 'User'
  }
  dateTimeDestructure: { // field return type name
    day: 'String'
    isToday: 'Boolean'
    time: 'String'
    year: 'String'
  }
  error: { // field return type name
    code: 'String'
    errors: 'errorType'
  }
  errorType: { // field return type name
    code: 'String'
    message: 'String'
  }
  listOfMessage: { // field return type name
    listOfMessage: 'Message'
  }
  status: { // field return type name
    list: 'String'
    message: 'String'
    status_code: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createUser: { // args
      birth_date: NexusGenScalars['Date']; // Date!
      first_name: string; // String!
      last_name: string; // String!
      passward: string; // String!
      phone_number: string; // String!
      recovery_email?: string | null; // String
      sex: number; // Int!
      username: string; // String!
    }
    deleteMessage: { // args
      mappingId: string; // String!
    }
    moveToTrash: { // args
      mappingId: string; // String!
    }
    saveMessage: { // args
      data: NexusGenInputs['messageInput']; // messageInput!
    }
    sentMessageNew: { // args
      data: NexusGenInputs['messageInput']; // messageInput!
    }
    sentMessageSaved: { // args
      data: NexusGenInputs['messageInput']; // messageInput!
      mappingId: string; // String!
    }
    updateMessage: { // args
      data: NexusGenInputs['messageInput']; // messageInput!
      mappingId: string; // String!
    }
    updateStatusRead: { // args
      isRead: boolean; // Boolean!
      mappingId: string; // String!
    }
    updateStatusStarred: { // args
      isStarred: boolean; // Boolean!
      mappingId: string; // String!
    }
  }
  Query: {
    checkIfUnique: { // args
      username: string; // String!
    }
    messages: { // args
      attribute?: string | null; // String
      dateTime?: NexusGenInputs['dateTimeInput'] | null; // dateTimeInput
      from?: string | null; // String
      isRead?: boolean | null; // Boolean
      isStarred?: boolean | null; // Boolean
      keyward?: string | null; // String
      skip?: number | null; // Int
      take?: number | null; // Int
      to?: string | null; // String
    }
    searchMessage: { // args
      keyward: string; // String!
      skip?: number | null; // Int
      take?: number | null; // Int
    }
    verifyUser: { // args
      passward: string; // String!
      username: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  UserResult: "authPayLoad" | "error" | "errorType"
  listOfMessageResult: "errorType" | "listOfMessage"
  messageResult: "Message" | "errorType"
  queryResult: "errorType" | "status"
  statusResult: "errorType" | "status"
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = keyof NexusGenUnions;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    __typename: true
    isTypeOf: false
    resolveType: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}