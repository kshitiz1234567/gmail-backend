### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Message {
  Bcc: [String]
  Cc: [String]
  attribute: String
  authorName: String
  body: String
  dateAndTime: dateTimeDestructure
  isRead: Boolean
  isStarred: Boolean
  mappingId: ID
  recipientName: [String]
  subject: String
  time: DateTime
}

type Mutation {
  createUser(birth_date: Date!, first_name: String!, last_name: String!, passward: String!, phone_number: String!, recovery_email: String, sex: Int!, username: String!): UserResult
  deleteMessage(mappingId: String!): statusResult
  moveToTrash(mappingId: String!): statusResult
  saveMessage(data: messageInput!): messageResult
  sentMessageNew(data: messageInput!): statusResult
  sentMessageSaved(data: messageInput!, mappingId: String!): statusResult
  updateMessage(data: messageInput!, mappingId: String!): statusResult
  updateStatusRead(isRead: Boolean!, mappingId: String!): statusResult
  updateStatusStarred(isStarred: Boolean!, mappingId: String!): statusResult
}

type Query {
  checkIfUnique(username: String!): queryResult
  meUser: UserResult
  messages(attribute: String, dateTime: dateTimeInput, from: String, isRead: Boolean, isStarred: Boolean, keyward: String, skip: Int, take: Int, to: String): listOfMessageResult
  searchMessage(keyward: String!, skip: Int, take: Int): listOfMessageResult
  verifyUser(passward: String!, username: String!): UserResult
}

type User {
  birth_date: Date
  first_name: String
  last_name: String
  phone_number: String
  recovery_email: String
  sex: Int
  username: String
}

union UserResult = authPayLoad | error | errorType

type authPayLoad {
  token: String
  user: User
}

type dateTimeDestructure {
  day: String
  isToday: Boolean
  time: String
  year: String
}

input dateTimeInput {
  gte: DateTime!
  lte: DateTime!
}

type error {
  code: String
  errors: [errorType]
}

type errorType {
  code: String
  message: String
}

type listOfMessage {
  listOfMessage: [Message]
}

union listOfMessageResult = errorType | listOfMessage

input messageInput {
  Bcc: [String!]!
  Cc: [String!]!
  body: String
  recipientName: [String!]!
  subject: String
}

union messageResult = Message | errorType

union queryResult = errorType | status

type status {
  list: [String]
  message: String
  status_code: String
}

union statusResult = errorType | status
